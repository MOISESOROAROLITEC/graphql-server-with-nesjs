scalar Date

interface Drink {
  name: String!
}

type Tea implements Drink {
  name: String!
}

type Coffee implements Drink {
  id: ID!
  name: String!
  brand: String!
  createAt: Date
  flavors: [Flavor!]!
}

type Flavor {
  id: ID!
  name: String!
}

input FlavorInput {
  id: ID
  name: String!
}

input CreateCoffeeInput {
  name: String!
  brand: String!
  flavors: [String!]!
}

input UpdateCoffeeInput {
  name: String
  brand: String
  flavors: [String!]
}

type Query {
  coffees: [Coffee!]!
  coffee(id: ID!): Coffee!
  drinks: [Drink!]!
}

type Mutation {
  createCoffee(createCoffeeInput: CreateCoffeeInput!): Coffee!
  updateCoffee(id: ID!, updateCoffeeInput: UpdateCoffeeInput!): Coffee!
  removeCoffee(id: ID!): Coffee!
}

type Subscription {
  coffeeAdded: Coffee!
}
